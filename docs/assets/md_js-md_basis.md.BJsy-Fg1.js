import{_ as i,c as s,o as a,a4 as l}from"./chunks/framework.C8UKyWV9.js";const g=JSON.parse('{"title":"Javascript 基础","description":"","frontmatter":{},"headers":[],"relativePath":"md/js-md/basis.md","filePath":"md/js-md/basis.md","lastUpdated":null}'),e={name:"md/js-md/basis.md"},t=l(`<h1 id="javascript-基础" tabindex="-1">Javascript 基础 <a class="header-anchor" href="#javascript-基础" aria-label="Permalink to &quot;Javascript 基础&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h3><ul><li><code>string</code> 字符串</li><li><code>number</code> 数字</li><li><code>boolean</code> 布尔值</li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code> 唯一值接收字符串为参数</li><li><code>bigint</code> 大整数</li></ul><h3 id="复杂类型" tabindex="-1">复杂类型 <a class="header-anchor" href="#复杂类型" aria-label="Permalink to &quot;复杂类型&quot;">​</a></h3><ul><li><code>Objec</code> 对象</li><li><code>Array</code> 数组</li><li><code>Function</code> 函数</li><li><code>RegExp</code> 正则表达式</li><li><code>Date</code> 日期</li><li><code>Set</code> 集合 类似数组成员唯一，允许你储存任何类型的唯一值，不会有隐式转换</li><li><code>Map</code> 映射 类似对象，键值可以是任意类型，具有极快的查找速度</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h3><p>let 与 const 有独立块级作用域</p><ul><li><code>var</code> 变量会提升 值可修改 申明不赋值可访问(undefined)</li><li><code>let</code> 不会提升 值可修改 申明不赋值可访问(undefined)(无提升所以在输出后进行定义也会报错 ReferenceError)</li><li><code>const</code> 不会提升 值不可修改 暂时性死区直接报错 ReferenceError <em>这个声明为常量</em></li></ul><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li></ul><h2 id="和-有什么区别" tabindex="-1">== 和 ===有什么区别 <a class="header-anchor" href="#和-有什么区别" aria-label="Permalink to &quot;== 和 ===有什么区别&quot;">​</a></h2><p>== 只比较值，不比较类型，会有隐式转换发生</p><ul><li>两边的类型是否相同，相同的话就比较值的大小，例如1==2，返回false</li><li>判断的是否是null和undefined，是的话就返回true</li><li>判断的类型是否是String和Number，是的话，把String类型转换成Number，再进行比较</li><li>判断其中一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较</li><li>如果其中一方为Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较,例：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[object Object]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span></code></pre></div><p>=== 叫做严格相等，是指：左右两边不仅值要相等，类型也要相等</p><h2 id="math-floor和parseint" tabindex="-1">Math.floor和parseInt <a class="header-anchor" href="#math-floor和parseint" aria-label="Permalink to &quot;Math.floor和parseInt&quot;">​</a></h2><p>Math.floor() 向下取整，返回小于或等于一个给定数字的最大整数</p><p>parseInt() 负数会向上取整，正数会向下取整，会忽略数字后面的非数字字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-4</span></span></code></pre></div>`,21),h=[t];function n(k,p,r,d,o,c){return a(),s("div",null,h)}const u=i(e,[["render",n]]);export{g as __pageData,u as default};

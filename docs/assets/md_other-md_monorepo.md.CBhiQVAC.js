import{_ as s,c as a,o as n,a4 as e}from"./chunks/framework.C8UKyWV9.js";const g=JSON.parse('{"title":"Monorepo","description":"","frontmatter":{},"headers":[],"relativePath":"md/other-md/monorepo.md","filePath":"md/other-md/monorepo.md","lastUpdated":null}'),i={name:"md/other-md/monorepo.md"},p=e(`<h1 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;Monorepo&quot;">​</a></h1><p>Monorepo（单体仓库）是一种软件开发策略，其中多个项目或库被存储在一个单一的版本控制仓库中。与传统的多仓库（multirepo）策略相比，monorepo 提供了一种集中管理和协作的方式，有助于提高开发效率和代码共享</p><h2 id="谁在用" tabindex="-1">谁在用 <a class="header-anchor" href="#谁在用" aria-label="Permalink to &quot;谁在用&quot;">​</a></h2><p>vue源码 elementplus源码 react源码 vite源码 都是monorepo</p><p>把多个项目放到一个仓库，用 pnpm 来安装管理依赖 （npm不行，yarn可以但不流行）</p><p>举个例子，假如两个项目同时要用到 babel 但是版本不一样，npm 在这种情况下就是非扁平化的就需要单独安装管理了，而pnpm 是扁平化的它会拥有一个全局仓库 <code>.pnpm-store</code> 会有所有安装过的依赖，如果项目用过某个依赖就可以共享给另一个项目(软链接)，没有用过就会去仓库取node_module（硬链接）（原理：软链接：理解为快捷方式图标和,硬链接：理解为引用类型共用着同一个内存地址）</p><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><p>需要先安装 pnpm :</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>假设项目目录如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>你随便取个项目名/</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── common (放一些共用的东西)</span></span>
<span class="line"><span>│   ├── index.ts (自己随便写东西)</span></span>
<span class="line"><span>│   └── package.json (pnpm init 初始化得到)</span></span>
<span class="line"><span>├── react（仅创建了项目未安装依赖）</span></span>
<span class="line"><span>├── vue3（仅创建了项目未安装依赖）</span></span>
<span class="line"><span>├── pnpm-workspace.yaml （核心）</span></span>
<span class="line"><span>├── package.json （根目录的）</span></span></code></pre></div><p>我们会在 common 写一些公共的代码，react 和 vue3 会用到 common 中的代码，所以需要把 common 和 react、vue3 关联起来</p><p>pnpm-workspace.yaml：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common&#39;</span></span></code></pre></div><p>这就把项目都关联在了一起，可以共享依赖，比如在common中安装了lodash，那么react和vue3中都可以使用</p><p>此时在 <strong>根目录</strong> 运行 <code>pnpm install</code> 安装依赖，此时会依次为项目安装依赖，能够复用的依赖会被提取到根目录的 node_modules 中，不能复用的依赖会被提取到各个项目的 node_modules 中</p><p>现在对各个项目的 <code>package.json</code> 进行修改，主要修改的是 <code>name</code> 属性,比如 vue3 中的原 name 值是 <code>vue3</code>，修改为 <code>@web/vue3</code> (其他两项 <code>@web/react</code>和 <code>@web/common</code>)，格式以 <code>@</code> 开头 <code>/</code> 结尾=,名字可以自己起(这样会被视作一个本地的依赖，引入时要用到</p><p>到这里我们就可以吧 common 视作一个依赖来添加到 react 和 vue3 中了，比如在 vue3 中安装 common （根目录下运行不是某个项目的根目录）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --filter @web/vue3 指定在 vue3 项目中安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @web/common</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @web/vue3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># react 同理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @web/common</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @web/react</span></span></code></pre></div><p>(如果命令报错请降级 pnpm 版来尝试修复)</p><p>可以看它们的 package.json 中已经安装了 common 依赖了</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@web/common&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:^&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样他们就能 <strong>实时的</strong> 共享这个依赖了,很方便使用</p><p><code>import 你在common的index.ts写的某个东西 from @web/common</code></p><p>当然了如果要把依赖安装到全局的话加上 -w -D 就行了，如：<code>pnpm i xxx -w -D</code></p>`,25),t=[p];function o(l,h,d,c,k,r){return n(),a("div",null,t)}const u=s(i,[["render",o]]);export{g as __pageData,u as default};
